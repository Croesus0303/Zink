rules_version = '2';
  service cloud.firestore {
    match /databases/{database}/documents {
      // Collection group query rules for timeline feature
      match /{path=**}/submissions/{submissionId} {
        allow read: if request.auth != null;
      }
      
      match /{path=**}/likes/{likeId} {
        allow read: if request.auth != null;
      }
      
      match /{path=**}/comments/{commentId} {
        allow read: if request.auth != null;
      }

      // Users collection - users can read/write their own data, read others
      match /users/{userId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId;

        // User's submissions subcollection - for profile posts
        match /submissions/{submissionId} {
          allow read: if request.auth != null;
          allow write: if request.auth != null && request.auth.uid == userId;
        }

        // User's likes subcollection - for like management
        match /likes/{likeId} {
          allow read: if request.auth != null && request.auth.uid == userId;
          allow write: if request.auth != null && request.auth.uid == userId;
        }
      }

      // Events are readable by all authenticated users
      match /events/{eventId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null &&
          (request.auth.token.admin == true || request.auth.token.moderator == true);

        // Submissions within events
        match /submissions/{submissionId} {
          allow read: if request.auth != null;
          allow create: if request.auth != null &&
            request.auth.uid == request.resource.data.uid;
          // Allow owner to update/delete, AND allow others to update ONLY likeCount field
          allow update: if request.auth != null && (
            request.auth.uid == resource.data.uid ||
            request.auth.token.admin == true ||
            (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount']))      
          );
          allow delete: if request.auth != null &&
            (request.auth.uid == resource.data.uid ||
             request.auth.token.admin == true);

          // Likes within submissions - fixed to allow proper access
          match /likes/{likeUserId} {
            allow read: if request.auth != null;
            allow create: if request.auth != null && request.auth.uid == likeUserId;
            allow delete: if request.auth != null && request.auth.uid == likeUserId;
          }

          // Comments within submissions
          match /comments/{commentId} {
            allow read: if request.auth != null;
            allow create: if request.auth != null;
            allow update, delete: if request.auth != null &&
              request.auth.uid == resource.data.uid;
          }
        }
      }
    }
  }